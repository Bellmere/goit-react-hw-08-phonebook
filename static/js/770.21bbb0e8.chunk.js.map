{"version":3,"file":"static/js/770.21bbb0e8.chunk.js","mappings":"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","sources":["Redux/Contacts/Selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"ContactList_contact__list__2jNwc\",\"contact__list__item\":\"ContactList_contact__list__item__fOWm7\",\"contact__list__btn\":\"ContactList_contact__list__btn__5X2Ck\"};","import { delContact } from 'Redux/Contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter, getContacts } from 'Redux/Contacts/Selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState } from 'react';\nimport css from '../ContactList/ContactList.module.css';\n\nconst getNormalizedContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n};\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const normalizedContacts = getNormalizedContacts(contacts, filter);\n  const [loading, setLoading] = useState('');\n\n  const dispatch = useDispatch();\n  const handleDelete = async id => {\n    setLoading(id);\n    try {\n      await dispatch(delContact(id));\n      setLoading('');\n    } catch (error) {\n      console.log(error);\n    }\n  } \n\n\n    return (\n        <div>\n            <ul className={css.contact__list}>\n                {normalizedContacts.map((contact, id) => (\n                    <li key={id} className={css.contact__list__item}>\n                        <span>{contact.name} :</span>\n                        <span>{contact.phone}</span>\n                        <button\n                        className={css.contact__list__btn} \n                        onClick={() => handleDelete(contact.id)}\n                        >\n                          {\n                            loading === contact.id ? (<Loader />) : (<span>Delete</span>)\n                          }\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"form__label\":\"ContactForm_form__label__8W82B\",\"form__inputName\":\"ContactForm_form__inputName__fnduK\",\"form__submitBtn\":\"ContactForm_form__submitBtn__AY-Rx\"};","import React from 'react';\nimport { useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'Redux/Contacts/operations';\nimport { getContacts } from 'Redux/Contacts/Selectors';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { Loader } from 'components/Loader/Loader';\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\nexport const ContactForm = () => {\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n  const flag = useRef(false);\n\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n        case 'name':\n            setName(value)\n            break;\n        case 'number':\n            setNumber(value);\n            break;\n    \n        default:\n            break;\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    flag.current = true;\n      const contactsList = [...items];\n    if (contactsList.findIndex(contact => name.toLocaleLowerCase() === contact.name.toLocaleLowerCase()) !== -1) {\n      alert(`${name} is already in contacts.`);\n      flag.current = false;\n      return;\n    }\n    try {\n      await dispatch(addContact({ name: name, phone: number }));\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n    flag.current = false;\n}\n\n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n            <label htmlFor={nameInputId} className={css.form__label}>Name</label>\n            <input\n            className={css.form__inputName}\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            />\n            <label htmlFor={numberInputId} className={css.form__label}>Number</label>\n            <input\n            className={css.form__inputName}\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleChange}\n            />\n            <button \n            type='submit'\n            className={css.form__submitBtn}\n            >\n                {flag.current === true? (<Loader/>) : (<span>Add Contact</span>)}\n            </button>\n        </form>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter__wrapper\":\"Filter_filter__wrapper__RVCEc\",\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import css from '../Filter/Filter.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { change } from 'Redux/Contacts/filterSlice';\nimport { getFilter } from 'Redux/Contacts/Selectors';\n\nconst filterInputId = nanoid();\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const handleChange = e => {\n        dispatch(change(e.target.value));\n      };\n\n    return (\n        <div className={css.filter__wrapper}>\n            <label\n            className={css.filter__label}\n            htmlFor={filterInputId}\n            >\n                Find contacts by name\n            </label>\n            <input\n            className={css.filter__input}\n            id={filterInputId}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleChange}\n            />\n        </div>\n    );\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { getIsLoading, getError } from \"Redux/Contacts/Selectors\";\nimport { fetchContacts } from \"Redux/Contacts/operations\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n      }, [dispatch]);\n\n      return (\n        <div\n        style={{\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: 20,\n            color: '#010101',\n        }}\n        >\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <Loader/>}\n        <ContactList />\n    </div>\n      );\n};"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","ContactList","normalizedContacts","contact","name","toLowerCase","includes","getNormalizedContacts","useSelector","useState","loading","setLoading","dispatch","useDispatch","handleDelete","id","delContact","console","log","className","css","map","phone","onClick","Loader","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nameInputId","numberInputId","ContactForm","setName","number","setNumber","flag","useRef","handleChange","e","target","value","handleSubmit","preventDefault","current","findIndex","toLocaleLowerCase","alert","addContact","reset","onSubmit","htmlFor","type","pattern","title","required","onChange","filterInputId","Filter","change","Contacts","useEffect","fetchContacts","style","height","display","flexDirection","justifyContent","alignItems","fontSize","color"],"sourceRoot":""}